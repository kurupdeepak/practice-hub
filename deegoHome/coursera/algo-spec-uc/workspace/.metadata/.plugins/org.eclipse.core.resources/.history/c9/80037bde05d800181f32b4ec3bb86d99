import java.math.BigInteger;
import java.util.Random;
import java.util.Scanner;

public class FibonacciLastDigit {
	private static BigInteger getFibonacciLastDigitNaive(int n) {
		if (n <= 1)
			return new BigInteger("" + n);

		BigInteger previous = new BigInteger("0");
		BigInteger current = new BigInteger("1");

		for (int i = 0; i < n - 1; ++i) {
			BigInteger tmp_previous = previous;
			previous = current;
			current = tmp_previous.add(current);
		}

		return current.mod(new BigInteger("10"));
	}

	private static int getFibonacciLastDigitFast(int n) {
		if (n <= 1)
			return n;
		int a[] = new int[n];

		a[0] = 0;

		a[1] = 1;

		for (int i = 2; i < n; ++i) {
			a[i] = (a[i - 1] % 10) + (a[i - 2] % 10);
		}

		return (a[n - 1] + a[n - 2]) % 10;
	}

	public static void test(int n) {
		long start = System.currentTimeMillis();
		int f2 = getFibonacciLastDigitNaive(n).intValue();
		System.out.println("Time taken naive : " + (System.currentTimeMillis() - start) + "ms");
		start = System.currentTimeMillis();
		long f3 = getFibonacciLastDigitFast(n);
		System.out.println("Time taken soln: " + (System.currentTimeMillis() - start) + "ms");
		if (f2 == f3)
			System.out.println("OK");
		else
			System.out.println("Wrong f2=" + f2 + ",f3=" + f3);
	}

	public static void stress_test() {
		while (true) {
			Random random = new Random();
			int n = random.nextInt(1000);
			System.out.println(n);
			long start = System.currentTimeMillis();
			int f2 = getFibonacciLastDigitNaive(n).intValue();
			System.out.println("Time taken naive : " + (System.currentTimeMillis() - start) + "ms");
			start = System.currentTimeMillis();
			long f3 = getFibonacciLastDigitFast(n);
			System.out.println("Time taken soln: " + (System.currentTimeMillis() - start) + "ms");
			if (f2 == f3)
				System.out.println("OK");
			else {
				System.out.println("Wrong f2=" + f2 + ",f3=" + f3);
				System.exit(-1);
			}
		}
	}

	public static void main(String[] args) {
//		stress_test();
		Scanner scanner = new Scanner(System.in);
		int n = scanner.nextInt();
//		test(n);
		int c = getFibonacciLastDigitFast(n); System.out.println(c);
	}
}
