package test;

import java.util.Arrays;

public class Solution2 {
    public static void main(String args[] ) throws Exception {
 
    }
    
}

/* Define your class here */
/**
 * A simple class representing the Stack with the operations.
 * @author Deepak
 *
 */
class LocalStack<T> {
	/**
	 * Constant to define the initial size of the element array
	 */
	static final int INITIAL_SIZE = 10;
	/**
	 * Array to store the element.
	 */
	Object [] elements = new Object[INITIAL_SIZE];
	
	int top = -1;
	
	int size;
	
	LocalStack(int initialSize){
		elements = new Object[initialSize];
	}
	
	public LocalStack() {
		// TODO Auto-generated constructor stub
	}

	void push(T o) {
		if(++top >= elements.length) {
			addSize();
		}
		elements[top] = o;
		size++;
	}
	
	void addSize(){
		int size = elements.length + INITIAL_SIZE;
		elements = Arrays.copyOf(elements, size);
	}
	
	@SuppressWarnings("unchecked")
	T pop() {
		if(isEmpty())
			throw new StackEmptyException("Stack is empty" + top);
		size--;
		return (T) elements[top--];
	}
	
	int size() {
		return size;
	}
	
	boolean isEmpty() {
		return top < 0 || size == 0;
	}

	@Override
	public String toString() {
		return "LocalStack [elements=" + Arrays.toString(elements) + ", top=" + top + "]";
	}
	
	
}

class StackEmptyException extends RuntimeException{

	public StackEmptyException() {
		super();
		// TODO Auto-generated constructor stub
	}

	public StackEmptyException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
		super(message, cause, enableSuppression, writableStackTrace);
		// TODO Auto-generated constructor stub
	}

	public StackEmptyException(String message, Throwable cause) {
		super(message, cause);
		// TODO Auto-generated constructor stub
	}

	public StackEmptyException(String message) {
		super(message);
		// TODO Auto-generated constructor stub
	}

	public StackEmptyException(Throwable cause) {
		super(cause);
		// TODO Auto-generated constructor stub
	}
	
}