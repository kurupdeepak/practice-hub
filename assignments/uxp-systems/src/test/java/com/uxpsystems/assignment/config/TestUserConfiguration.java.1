package com.uxpsystems.assignment.config;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.fasterxml.jackson.databind.ObjectMapper;

//@Configuration
//@EnableWebSecurity
//@EnableGlobalMethodSecurity(prePostEnabled=true)
//@Order(Ordered.HIGHEST_PRECEDENCE)
public class TestUserConfiguration  extends GlobalMethodSecurityConfiguration{
	private static Logger log = LoggerFactory.getLogger(TestUserConfiguration.class);
	
	@Bean
	public ObjectMapper jsonOM() {
		return new ObjectMapper();
	}

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		log.debug("Configure called ");
		PasswordEncoder pe = PasswordEncoderFactories.createDelegatingPasswordEncoder();
		auth.inMemoryAuthentication()
		.passwordEncoder(pe)
		.withUser("user")
		.password(pe.encode("password"))
		.roles("USER")
		.and()
		.withUser("admin")
		.password(pe.encode("password"))
		.roles("ADMIN", "USER");
	}

	@Configuration
	public static class TestWebSecurityConfig extends WebSecurityConfigurerAdapter {
		@Override
		protected void configure(HttpSecurity http) throws Exception {
			log.debug("Configure called with http " + http);
			http.authorizeRequests().anyRequest().authenticated().and().csrf().disable().httpBasic();
		}

	}
}


